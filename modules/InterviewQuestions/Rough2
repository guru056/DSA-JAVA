8,89,90,356,353

public String getLargestNumber(int[] arr) {

    // to a string arr
    //write a comparator for the string array

    // comparator

    s1 ,s2
    s1 + s2 > s2 + s1

}

private

n elements
k -- given value

1,2,3,4
k = 2
o/p -> sum([3,4,5,5,6,7])

[1,2], [2,3], [3,4] , [1,3] , [1,4], [2,4]


[1,2,3], [1,2,4], [1,3,4], [2,3,4]

nck
1,2,3,4,5
i = 0
k = 3,
4C2

i = 1
n-ick-1
1c2


n-1ck-1


static int sumTotal = 0;
public int sumSubarrays(int[] arr, int k) {



}

public void sumSubarrayRecur(int[] arr, int sum, int n, int k) {

  if(n < 0) {
  	return;
  }

	if(k == 0) {
  	sumTotal += sum;
    return;
  }

	sumSubarrayRecur(arr, sum + arr[n-1], n-1, k-1)
  sumSubarrayRecur(arr, sum, n-1, k)

}

class Node {
 int data;
 Node next;
}


public Node reverse(Node head) {

	Node prev = null;
  Node current = head;
  Node next;

  while(current != null) {
  	next = current.next;
    current.next = prev;
		prev = current;
    current = next;
  }

  return prev;
}

class Graph {

}


public void dfs(Graph graph) {


	for (int i = 0; i < graph.vertices.length; i++) {

  	if(!visited[i]) {
    	dfsRecusrsive(graph, visited, int v)
    }
  }

}

public void dfsRecusrsive(Graph graph, boolean[] visited, int v) {

		visited[v] = true;
    sout(graph[v]);
    for(int vertex: graph[i]) {
    		if(!visited[vertex]) {
        	dfsRecusrsive(graph, visited, vertex);
        }
    }
}


1,12,10,9,2,3
k = 6

PQ




=================================================================

guruism056@gmail.com


Payment_methods
Payment_gateways
Payment_method_mappings  (enabled / disabled)

User should be routed to corresponding payment method

Assumption
Card data [first six digits] from service
Goal: db design, ie entities


Payment_methods
Id,
Name,
created_at

Payment_method_subtypes
Id -> 1
Payment_method_id -> 1
Name -> VISA

Payment_gateways
Id
Name
Creation_date

Payment_method_mapping
Payment_method_id
payment_method_type
Payment_gateway_id
Enabled
Updated_at
Updated_by
reason


Pitch the user to use services
2. Campaign Money with expiry date
3. Add loyalty points for user activity
4. Policy for rewarding as well as discount.  [for simplicity: 10% of rewarded money]




NoBroker Wallet (Loyalty Points) (Design Goals)

One wallet per user
Ability to put campaign money (TOPUP) - (Independence day offer 100RS with expiry 30th Aug, created date -> Aug 1rst) - send sms, email
Based on user activity credit some amount (REWARD) - with expiry date of 1 year from credit date
Redeeming the wallet amount in some transaction (DISCOUNT) (policy -> 10 % (% or FLAT) upto 200 - service, city, transaction amount)
1. Consider policy as a simple 10% of tx amount
2. Build a full fledged rule engine
Use wallet for referral system (userA refers userB, userB gets 150RS points, ince userB completes first payment userA gets 150RS) - Bonus Question



 -> Ability to add loyalty points

Loyalty_transactions

Id →
User_id
orderId
Amount
Type [debit / credit / refund]
Service_type
status
Expiry_date
Created_at
Updated_by [0 -> system, used id -> manual removal / addition ]





APIs


100 cr 9th aug
100 cr 10th
100 cr 11th

150
Id1 100 debit creditid1
Id2 50 debit creditid2

Id3 100 refund xyz

1500 - 150

150 db 8th created - cancelling
150 db 8th

100
200
10
10
10
10
10

50db


rewardCash
added amount, remaining amount - 10th

transaction
100 cr - created …
150db - …

transactionRewardCashMapping
distribution

===================================================================


SQL table : Employee ID, Manager ID

C -> A   map.get(C)
B -> A
A -> D
D -> E
E -> E

E -> A,B,C,D


Expected Output :
 C -> A

C -> A, D, E
B -> A,D,E
A -> D,E
D -> E

A -> C, B
D -> A
E -> D

Public Map<Employee, List<Employee> managerEmployeeMapping(Map<Employee, Employee> employeeManagerMap) {



}

List<Employee> getManagersForEmployee(String employee) {
	List<String> resultList = new ArrayList<>();

	if(map.get())

}


==========================================================

Find out the longest common substring from two strings.


X = abcde
Y = dbcdfee
Ans = bcd


Abc
Dbc   -> 2

Abc
Dbcd -> 0

Dp[i][j] = 1 + dp[i-1][j-1], str1[i] == str2[j]
            = 0 , otherwise


String longestCommonSubstring(String str1, String str2) {

	Int m = str1.length();
	Int n = str2.length();

	If (m == 0 || n == 0)
		Return “”;

	Int[][] dp = new int[m+1][n+1];
	Int maxLength = 0;
	Int endIndex = -1;

for(int i = 1; i <= m; i++) {
		for(int j = 1; j <= n; j++) {
	if(str1.charAt(i-1) == str2.charAt(j-1)) {
	Dp[i][j] = 1 + dp[i-1][j-1];
	if(maxLength < dp[i][j]) {
	endIndex = i-1;
	maxLength = dp[i][j];
}
}
	Else {
	Dp[i][j] = 0;
}
}
}

//Int startString = endIndex - maxLength +1;
Return endIndex == -1 ? “”: str1.substring(endIndex - maxLength +1, endIndex+1);
}

https://ideone.com/kic9fB

