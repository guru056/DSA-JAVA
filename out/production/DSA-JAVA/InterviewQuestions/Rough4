=============================================================================
public static String collapseString(String inputString) {
        int n = inputString.length();
        if (n == 0)
            return "";  // return empty string if inputString is empty.
        int charCount = 0; // maintain character count while iterating
        String resultString = "";

        for(int i = 0; i < n; i++) {
            char currentChar = inputString.charAt(i);
            charCount = 1;
            while (i < n - 1   && inputString.charAt(i + 1) == currentChar) {
                charCount++;
                i++;
            }
            resultString += (String.valueOf(charCount) + currentChar);
        }
        return resultString;

}

=============================================================================
static int countConnections(List<List<Integer>> matrix) {

            int m = matrix.size();
            if(m == 0) { // return 0 for empty input
                return 0;
            }
            int n = matrix.get(0).size();
            int connectionCount = 0; // result counter

            //Consider four directions to avoid duplicate connections and get distinct ones only
            int[] XCoordinates = {-1,1,-1,0}; // top diagonal left, bottom diagonal left, top , right
            int[] YCoordinates = {-1,-1,0,1};

            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    if(matrix.get(i).get(j) == 1) {
                        for (int pos = 0; pos < XCoordinates.length; pos++) {
                            if(isValid(matrix, i + XCoordinates[pos], j + YCoordinates[pos])) {
                                connectionCount++;
                            }
                        }
                    }
                }
            }
            return connectionCount;
    }

    static boolean isValid(List<List<Integer>> matrix, int i, int j) {
        return (i >= 0 &&
              i < matrix.size() &&
              j >= 0 &&
              j < matrix.get(0).size() &&
              matrix.get(i).get(j) == 1);
    }

====================================================================================