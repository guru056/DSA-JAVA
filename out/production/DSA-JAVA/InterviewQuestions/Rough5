//Hi

String s1 = new String("ac");

String s2 = "ac";
String s3 = "ac";


//Employee e1 = new Employee(123, 2345);
//Employee e2 = new Employee(123, 2345);
//Employee e3 = new Employee(12, 2345);


class Employee -> id ,salary -> BigInteger

1. Immutable
2. No setters
3.

class Employee {

    private BigInteger id;
    private BigInteger salary;

    private EmployeeConstants pool = EmployeeConstants.getInstance();

    public Employee(BigInteger id, BigInteger salary) {


        Employee emp = pool.checkInPool(id, salary);

        //check in pool
        if(emp == null) {
            this.id = id;
            this.salary = salary;
            pool.addToPool(this);
            return this;
        }

        return emp;
    }

    @override
    public boolean equals(Employee emp) {
        return this.id.equals(emp.id) && this.salary.equals(emp.salary);
    }

    //similarly hashCode

}


class EmployeeConstants<T> {

    List<T> list = new ArrayList<>();
    Map<BigInteger, List<Employee>> map;


    //singleton
    public static EmployeeConstants getInstance() {



    }

    //add
    public void addToPool(T emp) {
        list.add(emp);

    }

    public T checkInPool(BigInteger id, BigInteger salary) {

        for(Employee e: list) {

            if(e.getId.equals(id) && e.getSalary().equals(salary)) {

                return e;
            }
        }
        return null;

    }

            // on garbage collect
    public boolean removeFromPool(T emp) {
        return list.remove(emp);
    }

}


===========================================================================

GET {base_url}/v1/merchants?start_sate=&end_date=&offset=&limit=

100
0,20 -> 20
21,20

getMerchants(Date start_sate, Date end_date, long offset, long limit) {

		//cache layer


    //db layer (MySql)
    SELECT * FROM merchants where start_date >= {start_date} AND start_date <= {end_date} LIMIT offset,limit;



}
{

}

getMerchants(List<Merchant> merchants, Date start_sate, Date end_date, long offset, long limit)
{
  List<Merchant> merchantsInDateRange = new ArrayList<>();
  long off = 0;

  for(Merchant merchant: merchants) {
  		if(merchantsInDateRange.size() == limit) break;
  		if(merchant.getStartDate().compareTo(start_sate) >= 0 && merchant.getStartDate().compareTo(end_date) <= 0) {
      	if(++off >= offset) {
      		merchantsInDateRange.add(merchant);
        }
      }
  }

  return merchantsInDateRange;
}

n random nums not in sorted order


kth largest number

i - 0 - k heap
k+1

1,2,3

Payment Request
{
	sender,
  reciever,
  amount,
  unique_id,
  checksum
}


Paypal
{

}


=============================================================



1. on-board
2. issue books

Library management system


-> A library has certain entities : books, CDs etc --> list of entity types
-> User
-> LibraryManager
->


class Library { // list of all entities


    EntityRepo entityRepo;

		//add entity
    public void addEntity(Entity entity) {
    	entitiyRepo.add(entity);
    }

    //issue entity to user
    public void issueEntity(EntityType entity, User user) {
    	if(!entity.getAvaialble()) {
      		throw new Exception("Book not available");
      }
      entity.setAvailable(false);
      entityRepo.updateEntity(entity.id, entity);
      // @todo maintain the mapping
    }


    //search for an entity
    public Entity getEntityDetails(String id) {
    	return

    }


    private EncryptStrategy getEncryptStrategy(EnityType entityType) {
    	switch() {


      }

    	return new RandomEncryptStrtategy();
    }
}

class EntityRepo {

	int uniqueId = 1;
  EncryptStrategy encryptStrtegy;

  List<Entity> entities;// initialize in constructor
  Map<Integer, Entity> entityMap;


  public void addEntity(Entity entity) {
  		entity.setId(++uniqueId);
    	map.put(uniqueId, entity);
  }


	public Entity findById(String id) {
  		return map.get(id);
  }



  public void updateEntity(String id, Entity entity) {
  	map.put(id, entity);
  }


  public void setEncryptStrtegy(EncryptStrategy encryptStrategy) {


  }


}

interface EncryptStrategy {

	public String encrypt(int uniqueId);
}

RandomEncryptStrategy implements EncryptStrategy{




public String encrypt();

}



class Records {
 //maintains mapping of entity and user

 //addRecord

 //updateRecord

}

class User { // can be an abstract class

	protected String id;
  protected String name;
  private UserType userType;


}


enum EntityType {
	BOOK,
  CD
}

enum UserType {
	STUDENT,
  LIBRARIAN,
  PROFESSOR
}

abstract class Entity {

		private String id;
    privte EntityType entityType;
    private boolean isAvailable;
		..


}

class Book extends Entity {



}


class CD extends Entity {



}

class Magazine extends Entity {



}





//mapping for entity and User









