Given an array of integers for which ith element is price of a given stock on day i.
Return maximum profit that you can make given that you are permitted to complete at most one transaction.
Note that you cannot sell a stock Before you can buy one.
Note: Buying and Selling has to be on different days

Example:
Input: [7,1,5,3,6,4]
Output: 5 (Buy on day 2  and sell on day 5, profit = 6-1 = 5)


BuyMin = [7,1,1,1,1,1]
SellMax =  [7,6,6,6,6,4]

[9,8,7]
[9,8,7]

public int getMaxProfit(int[] arr) {
    int n = arr.length;

    if(n == 0)
        return 0;

    /**int[] buyMin = new int[n];
    int[] sellMax = new int[n];
    **/

    /**buyMin[0] = arr[0];
    for(int i = 1; i < n; i++) {
        buyMin[i] = Math.min(arr[i], buyMin[i-1]);
    }*/

    /**sellMax[n-1] = arr[n-1];
    for(int i = n-2; i >= 0; i--) {
        sellMax[i] = Math.max(arr[i], sellMax[i+1]);
    }**/

    int maxProfit = Integer.MIN_VALUE;
    int sell_max = arr[n-1];
    int buy_min;
    for (int i = 0 ; i < n; i++) {
        buy_min = (i == 0) ? arr[0] : Math.min(arr[i-1], buy_min);
        sell_max = (i == 0) ? arr[n-1] : Math.max(arr[n-1-i], sell_max);
        maxProfit = Math.max(maxProfit, sell_max - buy_min );
    }

    return maxProfit;
}
// O(n) , O(n)

Example 2: [10, 7, 5, 8, 11, 9]

buyMin = [10,7,5,5,5,5]

i = 0
sell_max = 9
maxProfit = 0;

i = 1
sell_max = 11
buy_min = 7
maxProfit = 4

i = 2
sell_max = 11
buy_min = 5
maxProfit = 6

i = 3
sell_max = 11
buy_min = 5
maxProfit = 6

i = 4
sell_max = 11
buy_min = 5
maxProfit = 6

i = 5
sell_max = 11
buy_min = 5
maxProfit = 6


==================================

1. Set of scripts on servers

2. service is supposed

3. Date range, delivery target , Script name --> generate a set of reports and set to corresponding users

4. We have a list of available scripts.

5. One script needs to finish before another starts





--> Datastore for progress of script.

--> average running time for a script -> Varies





-> Datastore for metadata of  scripts

-> Message Queue needed for scheduling

-> Scheduler



Core Logic


1. Scheduler -> Message Queue -> Consumer -> Datastore












NoSql Database [MongoDB]



->  job_id

-> scriptDetails  //script parameters

     -> name

     -> data_range

->status

-> started_at

-> completed_at









Ensuring High Availability





